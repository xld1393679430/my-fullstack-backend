{"version":3,"sources":["pages/notes/NoteForm.jsx","components/Toggleable/index.jsx","actions/noteAction.js","pages/notes/index.jsx"],"names":["NoteForm","createNote","useState","inputValue","setInputValue","onSubmit","event","preventDefault","content","important","style","maxWidth","size","placeholder","value","addonAfter","height","htmlType","type","icon","onChange","target","Toggleable","forwardRef","ref","buttonLabel","children","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","onClick","marginTop","displayName","createNoteAction","note","noteFormRef","dispatch","a","addNoteMessageKey","message","loading","key","noteServer","_note","success","data","current","error","Page","useSelector","state","notes","user","useRef","useDispatch","showAll","setShowAll","notesToShow","filter","item","concat","reverse","columns","title","dataIndex","render","_","record","to","id","useEffect","getNotes","PlusOutlined","margin","rowKey","dataSource"],"mappings":"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","file":"static/js/4.606a61c4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Input } from 'antd';\nimport { CheckOutlined } from '@ant-design/icons';\n\nconst NoteForm = ({\n  createNote,\n}) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const note = {\n      content: inputValue,\n      important: true,\n    };\n    createNote(note);\n    setInputValue('');\n  };\n\n  const handleChangeInputValue = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Input\n        style={{ maxWidth: 420 }}\n        size=\"middle\"\n        placeholder=\"请输入\"\n        value={inputValue}\n        addonAfter={(\n          <Button\n            style={{ height: 30 }}\n            htmlType=\"submit\"\n            type=\"text\"\n            icon={<CheckOutlined />}\n          >\n            提交\n          </Button>\n)}\n        onChange={handleChangeInputValue}\n      />\n    </form>\n  );\n};\n\nexport default NoteForm;\n","import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Button } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst Toggleable = forwardRef(({\n  buttonLabel,\n  children,\n}, ref) => {\n  const [visible, setVisible] = useState(false);\n\n  const hideWhenVisible = { display: visible ? 'none' : '' };\n  const showWhenVisible = { display: visible ? '' : 'none' };\n\n  const toggleVisibility = () => {\n    setVisible(!visible);\n  };\n\n  useImperativeHandle(ref, () => ({\n    toggleVisibility,\n  }));\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <Button onClick={toggleVisibility}>{buttonLabel}</Button>\n      </div>\n      <div style={showWhenVisible}>\n        {children}\n        <Button style={{ marginTop: 10 }} onClick={toggleVisibility}>cancel</Button>\n      </div>\n    </div>\n  );\n});\n\nToggleable.propTypes = {\n  buttonLabel: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n  ]).isRequired,\n};\n\nToggleable.displayName = 'Toggleable';\n\nexport default Toggleable;\n","import { message } from 'antd';\nimport noteServer from '../services/notes';\n\nexport const initNoteAction = (notes) => {\n    return async (dispatch) => {\n        const notes = await noteServer.getNotes();\n        dispatch({\n            type: 'INIT_NOTE',\n            data: notes\n        });\n    };\n};\nexport const createNoteAction = (note, noteFormRef) => {\n    return async dispatch => {\n        const addNoteMessageKey = 'addNoteMessageKey';\n        message.loading({ content: '添加中...', key: addNoteMessageKey });\n        try {\n            const _note = await noteServer.createNote(note);\n            message.success({ content: '添加成功', key: addNoteMessageKey });\n            dispatch({\n                type: 'NEW_NOTE',\n                data: _note\n            });\n            noteFormRef.current.toggleVisibility();\n        } catch (error) {\n            message.error({ content: '添加失败', key: addNoteMessageKey });\n        }\n    };\n};\n\nexport const toggleImportanceOfAction = (id) => {\n    return async (dispatch, getState) => {\n        const { notes } = getState();\n        const note = notes.find((item) => item.id === id);\n        const changedNote = { ...note, important: !note.important };\n        const data = await noteServer.updateNote(id, changedNote);\n        const _notes = notes.map(item => (item.id === id ? data : item));\n        dispatch({\n            type: 'TOGGLE_IMPORTANCE',\n            data: _notes,\n        });\n    };\n};","import React, { useState, useRef, useEffect } from 'react';\nimport { Button, Table } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Toggleable from '../../components/Toggleable';\nimport NoteForm from './NoteForm';\nimport { createNoteAction, initNoteAction } from '../../actions/noteAction';\nimport './index.css';\n\nconst Page = () => {\n  const { notes, user } = useSelector((state) => state);\n  const noteFormRef = useRef();\n  const dispatch = useDispatch();\n  const [showAll, setShowAll] = useState(true);\n\n  let notesToShow = showAll ? notes : notes.filter((item) => item.important);\n  notesToShow = [].concat(notesToShow).reverse();\n\n  const handleToggleShowAll = () => {\n    setShowAll(!showAll);\n  };\n\n  const createNote = async (note) => {\n    dispatch(createNoteAction(note, noteFormRef));\n  };\n\n  const columns = [\n    {\n      title: 'id',\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: 'content',\n      dataIndex: 'content',\n      key: 'content',\n      // eslint-disable-next-line react/display-name\n      render: (_, record) => (\n        <Link to={`/main/note/${record.id}`}>{record.content}</Link>\n      ),\n    },\n  ];\n\n  useEffect(() => {\n    dispatch(initNoteAction());\n  }, []);\n\n  return (\n    <div>\n      {user && (\n        <Toggleable\n          ref={noteFormRef}\n          buttonLabel={\n            <span>\n              <PlusOutlined />\n              <span>new note</span>\n            </span>\n          }\n        >\n          <NoteForm createNote={createNote} />\n        </Toggleable>\n      )}\n      <Button style={{ margin: '10px 0' }} onClick={handleToggleShowAll}>\n        {showAll ? 'show important' : 'show all'}\n      </Button>\n\n      <Table rowKey={'id'} columns={columns} dataSource={notes} />\n    </div>\n  );\n};\n\nexport default Page;\n"],"sourceRoot":""}