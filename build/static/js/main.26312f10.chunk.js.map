{"version":3,"sources":["services/notes.js","pages/notes/index.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","getNotes","a","axios","get","then","res","data","createNote","note","post","updateNote","id","put","Notification","message","className","Note","content","important","toggleImportant","onClick","style","marginLeft","Page","messageKey","useState","notes","setNotes","inputValue","setInputValue","showAll","setShowAll","errorMessage","notesToShow","filter","item","handleSubmit","event","preventDefault","loading","key","console","log","target","date","Date","toISOString","Math","random","length","noteServer","success","concat","error","handleToggleImportant","find","changedNote","map","useEffect","index","onSubmit","placeholder","value","onChange","type","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26312f10.chunk.js","sourcesContent":["import axios from \"axios\"\n\nconst baseUrl = 'api/notes'\n\nconst getNotes = async () => {\n    return await axios.get(baseUrl).then(res => res.data)\n}\n\nconst createNote = async (note) => {\n    return await axios.post(baseUrl, note).then(res => res.data)\n}\n\nconst updateNote = async (id, note) => {\n    return await axios.put(`${baseUrl}/${id}`, note).then(res => res.data)\n}\n\nexport default {\n    getNotes,\n    createNote,\n    updateNote,\n}","import { message } from 'antd'\nimport axios from 'axios'\nimport React, { useState, useEffect, } from 'react'\nimport noteServer from '../../services/notes'\nimport './index.css'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\nconst Note = ({ note: { content, important }, toggleImportant }) => {\n    return (\n        <li className=\"note\">\n            {content}\n            <button onClick={toggleImportant} style={{ marginLeft: 10 }}>\n                {important ? 'make no important' : 'make important'}\n            </button>\n        </li>\n    )\n}\n\nconst Page = () => {\n    const messageKey = 'messageKey'\n    const [notes, setNotes] = useState([])\n    const [inputValue, setInputValue] = useState('')\n    const [showAll, setShowAll] = useState(false)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    const notesToShow = showAll ? notes : notes.filter(item => item.important)\n\n    const handleSubmit = async (event) => {\n        event.preventDefault()\n        message.loading({ content: '添加中...', key: messageKey })\n        console.log(event.target, 'event')\n        const note = {\n            content: inputValue,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n            id: notes.length + 1\n        }\n        try {\n            await noteServer.createNote(note)\n            message.success({ content: '添加成功', key: messageKey })\n            setNotes(notes.concat(note))\n            setInputValue('')\n        } catch (error) {\n            message.error({ content: '添加失败', key: messageKey })\n        }\n\n\n    }\n\n    const handleChangeInputValue = (event) => {\n        setInputValue(event.target.value)\n    }\n\n    const handleToggleShowAll = () => {\n        setShowAll(!showAll)\n    }\n\n    const handleToggleImportant = async (id) => {\n        const note = notes.find(item => item.id === id)\n        const changedNote = { ...note, important: !note.important }\n        const data = await noteServer.updateNote(id, changedNote)\n        setNotes(notes.map(item => item.id === id ? data : item))\n    }\n\n    useEffect(() => {\n        noteServer.getNotes().then(data => setNotes(data))\n    }, [])\n\n    return (\n        <div>\n            <h1>notes</h1>  \n            <Notification message={errorMessage} />\n            <button onClick={handleToggleShowAll}>show {showAll ? 'important' : 'all'}</button>\n            <ul>\n                {\n                    notesToShow.map((item, index) => (\n                        <Note key={index}\n                            note={item}\n                            toggleImportant={() => handleToggleImportant(item.id)} />\n                    ))\n                }\n            </ul>\n            <form onSubmit={handleSubmit}>\n                <input placeholder='请输入'\n                    value={inputValue}\n                    onChange={handleChangeInputValue}\n                />\n                <button type={'submit'} >提交</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Page","import React from \"react\";\nimport { Button } from 'antd';\nimport './App.css';\nimport Notes from './pages/notes'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Notes />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}